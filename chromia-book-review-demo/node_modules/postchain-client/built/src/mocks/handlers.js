import { http, HttpResponse } from "msw";
import { ResponseStatus } from "../blockchainClient/enums";
const blockchainRid = "D7AE4988E9FCAC470D1B5AB9CD04A79BFE165AB616B4D038C2ED944BA2461212";
const exampleTxHashString = "834ba9e86285875cd0c4f2ff2605db1ed921a1dcd47c873916d99e06f8874f5a";
const rejectReason = "[bc-rid=8E:DFB4, chain-id=0] Operation 'news_feed_ch5.news_feed:make_post' failed: Expected at least two operations, make sure that you included auth";
const invalidFormatRejectReason = "Operation 'news_feed_ch5.news_feed:make_post' failed: Expected at least two operations, make sure that you included auth";
export const handlers = [
    http.post(`http://localhost/tx/${blockchainRid}`, () => {
        return HttpResponse.json({});
    }),
    http.get(`http://localhost/tx/${blockchainRid}/${exampleTxHashString}/status`, () => {
        const responseBody = {
            status: ResponseStatus.Confirmed,
        };
        return HttpResponse.json(responseBody);
    }),
];
const responseBody = {
    status: ResponseStatus.Rejected,
    rejectReason,
};
const responseBodyInvalidRejectError = {
    status: ResponseStatus.Rejected,
    rejectReason: invalidFormatRejectReason,
};
export const errorHandler = {
    txError: http.post(`http://localhost/tx/${blockchainRid}`, () => {
        return new HttpResponse('{"error": "Could not parse JSON"}', {
            status: 400,
        });
    }, { once: true }),
    txStatusInvalidRejectFormat: http.get(`http://localhost/tx/${blockchainRid}/${exampleTxHashString}/status`, () => {
        return HttpResponse.json(responseBodyInvalidRejectError);
    }, { once: true }),
    statusRejected: http.get(`http://localhost/tx/${blockchainRid}/${exampleTxHashString}/status`, () => {
        return HttpResponse.json(responseBody);
    }, { once: true }),
    statusWaiting: http.get(`http://localhost/tx/${blockchainRid}/${exampleTxHashString}/status`, () => {
        return HttpResponse.json({
            status: ResponseStatus.Waiting,
        });
    }),
    statusUnknown: http.get(`http://localhost/tx/${blockchainRid}/${exampleTxHashString}/status`, () => {
        return HttpResponse.json({
            status: ResponseStatus.Unknown,
        });
    }),
};
//# sourceMappingURL=handlers.js.map
/// <reference types="node" />
import { z } from "zod";
import { Validation } from "./validation.types";
export declare const SignMethodSchema: z.ZodUnion<[z.ZodObject<{
    privKey: z.ZodUnion<[z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>, z.ZodType<Buffer, z.ZodTypeDef, Buffer>]>;
    pubKey: z.ZodUnion<[z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>, z.ZodType<Buffer, z.ZodTypeDef, Buffer>]>;
}, "strip", z.ZodTypeAny, {
    pubKey: (Uint8Array | Buffer) & (Uint8Array | Buffer | undefined);
    privKey: (Uint8Array | Buffer) & (Uint8Array | Buffer | undefined);
}, {
    pubKey: (Uint8Array | Buffer) & (Uint8Array | Buffer | undefined);
    privKey: (Uint8Array | Buffer) & (Uint8Array | Buffer | undefined);
}>, z.ZodObject<{
    pubKey: z.ZodUnion<[z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>, z.ZodType<Buffer, z.ZodTypeDef, Buffer>]>;
    sign: z.ZodFunction<z.ZodTuple<[z.ZodUnion<[z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>, z.ZodType<Buffer, z.ZodTypeDef, Buffer>]>], z.ZodUnknown>, z.ZodPromise<z.ZodUnion<[z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>, z.ZodType<Buffer, z.ZodTypeDef, Buffer>]>>>;
}, "strip", z.ZodTypeAny, {
    sign: (args_0: Uint8Array | Buffer, ...args_1: unknown[]) => Promise<Uint8Array | Buffer>;
    pubKey: (Uint8Array | Buffer) & (Uint8Array | Buffer | undefined);
}, {
    sign: (args_0: Uint8Array | Buffer, ...args_1: unknown[]) => Promise<Uint8Array | Buffer>;
    pubKey: (Uint8Array | Buffer) & (Uint8Array | Buffer | undefined);
}>]>;
export type SignMethod = z.infer<typeof SignMethodSchema>;
export declare const isSignMethodValid: Validation;

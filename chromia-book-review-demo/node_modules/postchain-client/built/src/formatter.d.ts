/// <reference types="node" />
import { Buffer } from "buffer";
import { GTX, RawGtx, RawGtxBody } from "./gtx/types";
import { QueryObject, QueryObjectGTV } from "./restclient/types";
import { DictPair } from "./gtv/types";
export declare function pgBytes(buffer: Buffer): string;
/**
 * Converts hex string to Buffer
 * @param key: string
 * @returns {Buffer}
 */
export declare function toBuffer(key: string): Buffer;
/**
 * Converts Buffer to hex string
 * @param buffer: Buffer
 * @returns {string}
 */
export declare function toString(buffer: Buffer): string;
export declare function toQueryObjectGTV(nameOrObject: string | QueryObject, queryArguments?: DictPair): QueryObjectGTV;
export declare class PgBytesInputException extends Error {
    constructor(buffer: Buffer);
}
export declare function ensureBuffer(value: string | Buffer): Buffer;
export declare function checkGtvType(value: any): boolean;
export declare function rawGtxToGtx(rawGtx: RawGtx): GTX;
export declare function rawGtxToRawGtxBody(rawGtx: RawGtx): RawGtxBody;
export declare function checkGtxType(value: any): boolean;
export declare function removeDuplicateSigners(signers: Buffer[]): Buffer[];
export declare function matchRellErrorString(rellError: string): {
    shortReason?: undefined;
    rellLine?: undefined;
    operation?: undefined;
} | {
    shortReason: string;
    rellLine: string;
    operation: string;
};

/// <reference types="node" />
import { PostRequestObjects, ResponseObject, FailOverConfig, HandleRequestInputProps } from "./types";
import { Endpoint } from "../blockchainClient/types";
import { Method } from "./enums";
export declare function getBlockchainRidFromIid(endpointPool: Endpoint[], chainId: number, failOverConfig?: FailOverConfig): Promise<string>;
export declare function requestWithRetry(method: Method, path: string, config: HandleRequestInputProps["config"], postObject?: PostRequestObjects | Buffer): Promise<ResponseObject>;
export declare function nextEndpoint(endpointPool: Endpoint[]): Endpoint;
export declare const shuffle: <T>(array: T[]) => T[];
export declare const sleep: (ms: number) => Promise<unknown>;
export declare function convertToPrintable(responseObject: any): any;
export declare function filterReachableEndpoint(endpointPool: Endpoint[]): Endpoint[];
export declare function isReachable(endpoint: Endpoint): boolean;
export declare const bftMajority: (n: number) => any;
export declare const setEndpointAsReachable: (endpointPool: Endpoint[]) => void;
export declare const setUnavailable: (endpoint: Endpoint, unreachableDuration: number) => void;
